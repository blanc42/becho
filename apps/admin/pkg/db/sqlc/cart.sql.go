// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_items (id, created_at, updated_at, product_variant_id, quantity, user_id, store_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, product_variant_id, quantity, user_id, store_id
`

type CreateCartItemParams struct {
	ID               string           `json:"id"`
	CreatedAt        pgtype.Timestamp `json:"created_at"`
	UpdatedAt        pgtype.Timestamp `json:"updated_at"`
	ProductVariantID string           `json:"product_variant_id"`
	Quantity         int32            `json:"quantity"`
	UserID           string           `json:"user_id"`
	StoreID          string           `json:"store_id"`
}

// Cart Items
func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, createCartItem,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ProductVariantID,
		arg.Quantity,
		arg.UserID,
		arg.StoreID,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductVariantID,
		&i.Quantity,
		&i.UserID,
		&i.StoreID,
	)
	return i, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM cart_items
WHERE id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteCartItem, id)
	return err
}

const getCartItem = `-- name: GetCartItem :one
SELECT ci.id, ci.created_at, ci.updated_at, ci.product_variant_id, ci.quantity, ci.user_id, ci.store_id, pv.sku, pv.price, pv.discounted_price, pv.title
FROM cart_items ci
JOIN product_variants pv ON ci.product_variant_id = pv.id
WHERE ci.id = $1 LIMIT 1
`

type GetCartItemRow struct {
	ID               string           `json:"id"`
	CreatedAt        pgtype.Timestamp `json:"created_at"`
	UpdatedAt        pgtype.Timestamp `json:"updated_at"`
	ProductVariantID string           `json:"product_variant_id"`
	Quantity         int32            `json:"quantity"`
	UserID           string           `json:"user_id"`
	StoreID          string           `json:"store_id"`
	Sku              string           `json:"sku"`
	Price            float64          `json:"price"`
	DiscountedPrice  pgtype.Float8    `json:"discounted_price"`
	Title            pgtype.Text      `json:"title"`
}

func (q *Queries) GetCartItem(ctx context.Context, id string) (GetCartItemRow, error) {
	row := q.db.QueryRow(ctx, getCartItem, id)
	var i GetCartItemRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductVariantID,
		&i.Quantity,
		&i.UserID,
		&i.StoreID,
		&i.Sku,
		&i.Price,
		&i.DiscountedPrice,
		&i.Title,
	)
	return i, err
}

const listCartItems = `-- name: ListCartItems :many
SELECT ci.id, ci.created_at, ci.updated_at, ci.product_variant_id, ci.quantity, ci.user_id, ci.store_id, pv.sku, pv.price, pv.discounted_price, pv.title
FROM cart_items ci
JOIN product_variants pv ON ci.product_variant_id = pv.id
WHERE ci.user_id = $1 AND ci.store_id = $2
ORDER BY ci.created_at
LIMIT $3 OFFSET $4
`

type ListCartItemsParams struct {
	UserID  string `json:"user_id"`
	StoreID string `json:"store_id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type ListCartItemsRow struct {
	ID               string           `json:"id"`
	CreatedAt        pgtype.Timestamp `json:"created_at"`
	UpdatedAt        pgtype.Timestamp `json:"updated_at"`
	ProductVariantID string           `json:"product_variant_id"`
	Quantity         int32            `json:"quantity"`
	UserID           string           `json:"user_id"`
	StoreID          string           `json:"store_id"`
	Sku              string           `json:"sku"`
	Price            float64          `json:"price"`
	DiscountedPrice  pgtype.Float8    `json:"discounted_price"`
	Title            pgtype.Text      `json:"title"`
}

func (q *Queries) ListCartItems(ctx context.Context, arg ListCartItemsParams) ([]ListCartItemsRow, error) {
	rows, err := q.db.Query(ctx, listCartItems,
		arg.UserID,
		arg.StoreID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCartItemsRow
	for rows.Next() {
		var i ListCartItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProductVariantID,
			&i.Quantity,
			&i.UserID,
			&i.StoreID,
			&i.Sku,
			&i.Price,
			&i.DiscountedPrice,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItem = `-- name: UpdateCartItem :one
UPDATE cart_items
SET quantity = $2, updated_at = $3
WHERE id = $1
RETURNING id, created_at, updated_at, product_variant_id, quantity, user_id, store_id
`

type UpdateCartItemParams struct {
	ID        string           `json:"id"`
	Quantity  int32            `json:"quantity"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, updateCartItem, arg.ID, arg.Quantity, arg.UpdatedAt)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductVariantID,
		&i.Quantity,
		&i.UserID,
		&i.StoreID,
	)
	return i, err
}
