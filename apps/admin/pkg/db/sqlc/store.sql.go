// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: store.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (id, created_at, updated_at, name, description, user_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, name, description, user_id, logo, image_id
`

type CreateStoreParams struct {
	ID          string           `json:"id"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	Name        string           `json:"name"`
	Description pgtype.Text      `json:"description"`
	UserID      string           `json:"user_id"`
}

// Stores
func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRow(ctx, createStore,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.UserID,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.Logo,
		&i.ImageID,
	)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM stores
WHERE id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteStore, id)
	return err
}

const getStore = `-- name: GetStore :one
SELECT id, created_at, updated_at, name, description, user_id, logo, image_id FROM stores
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStore(ctx context.Context, id string) (Store, error) {
	row := q.db.QueryRow(ctx, getStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.Logo,
		&i.ImageID,
	)
	return i, err
}

const listStores = `-- name: ListStores :many
SELECT id, created_at, updated_at, name, description, user_id, logo, image_id FROM stores
WHERE user_id = $1
ORDER BY created_at
`

func (q *Queries) ListStores(ctx context.Context, userID string) ([]Store, error) {
	rows, err := q.db.Query(ctx, listStores, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.Logo,
			&i.ImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :one
UPDATE stores
SET name = $2, description = $3, updated_at = $4
WHERE id = $1
RETURNING id, created_at, updated_at, name, description, user_id, logo, image_id
`

type UpdateStoreParams struct {
	ID          string           `json:"id"`
	Name        string           `json:"name"`
	Description pgtype.Text      `json:"description"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (Store, error) {
	row := q.db.QueryRow(ctx, updateStore,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.Logo,
		&i.ImageID,
	)
	return i, err
}
