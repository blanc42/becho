// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (id, created_at, updated_at, order_number, payment_status, order_status, store_id, customer_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, order_number, payment_status, order_status, store_id, customer_id
`

type CreateOrderParams struct {
	ID            string           `json:"id"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	OrderNumber   string           `json:"order_number"`
	PaymentStatus string           `json:"payment_status"`
	OrderStatus   string           `json:"order_status"`
	StoreID       string           `json:"store_id"`
	CustomerID    string           `json:"customer_id"`
}

// Orders
func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.OrderNumber,
		arg.PaymentStatus,
		arg.OrderStatus,
		arg.StoreID,
		arg.CustomerID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrderNumber,
		&i.PaymentStatus,
		&i.OrderStatus,
		&i.StoreID,
		&i.CustomerID,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (id, created_at, updated_at, product_item_id, quantity, order_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, product_item_id, quantity, order_id
`

type CreateOrderItemParams struct {
	ID            string           `json:"id"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	ProductItemID string           `json:"product_item_id"`
	Quantity      int32            `json:"quantity"`
	OrderID       string           `json:"order_id"`
}

// Order Items
func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ProductItemID,
		arg.Quantity,
		arg.OrderID,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductItemID,
		&i.Quantity,
		&i.OrderID,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteOrderItem, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, created_at, updated_at, order_number, payment_status, order_status, store_id, customer_id FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrderNumber,
		&i.PaymentStatus,
		&i.OrderStatus,
		&i.StoreID,
		&i.CustomerID,
	)
	return i, err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT id, created_at, updated_at, product_item_id, quantity, order_id FROM order_items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderItem(ctx context.Context, id string) (OrderItem, error) {
	row := q.db.QueryRow(ctx, getOrderItem, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductItemID,
		&i.Quantity,
		&i.OrderID,
	)
	return i, err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT id, created_at, updated_at, product_item_id, quantity, order_id FROM order_items
WHERE order_id = $1
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type ListOrderItemsParams struct {
	OrderID string `json:"order_id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) ListOrderItems(ctx context.Context, arg ListOrderItemsParams) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItems, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProductItemID,
			&i.Quantity,
			&i.OrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT id, created_at, updated_at, order_number, payment_status, order_status, store_id, customer_id FROM orders
WHERE store_id = $1
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type ListOrdersParams struct {
	StoreID string `json:"store_id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.StoreID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrderNumber,
			&i.PaymentStatus,
			&i.OrderStatus,
			&i.StoreID,
			&i.CustomerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET payment_status = $2, order_status = $3, updated_at = $4
WHERE id = $1
RETURNING id, created_at, updated_at, order_number, payment_status, order_status, store_id, customer_id
`

type UpdateOrderParams struct {
	ID            string           `json:"id"`
	PaymentStatus string           `json:"payment_status"`
	OrderStatus   string           `json:"order_status"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ID,
		arg.PaymentStatus,
		arg.OrderStatus,
		arg.UpdatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrderNumber,
		&i.PaymentStatus,
		&i.OrderStatus,
		&i.StoreID,
		&i.CustomerID,
	)
	return i, err
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE order_items
SET quantity = $2, updated_at = $3
WHERE id = $1
RETURNING id, created_at, updated_at, product_item_id, quantity, order_id
`

type UpdateOrderItemParams struct {
	ID        string           `json:"id"`
	Quantity  int32            `json:"quantity"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, updateOrderItem, arg.ID, arg.Quantity, arg.UpdatedAt)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProductItemID,
		&i.Quantity,
		&i.OrderID,
	)
	return i, err
}
