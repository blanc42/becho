// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: joins.sql

package db

import (
	"context"
)

const createProductVariantOption = `-- name: CreateProductVariantOption :one
INSERT INTO product_variant_options (
    product_variant_id, variant_option_id
) VALUES (
    $1, $2
)
RETURNING product_variant_id, variant_option_id
`

type CreateProductVariantOptionParams struct {
	ProductVariantID string `json:"product_variant_id"`
	VariantOptionID  string `json:"variant_option_id"`
}

func (q *Queries) CreateProductVariantOption(ctx context.Context, arg CreateProductVariantOptionParams) (ProductVariantOption, error) {
	row := q.db.QueryRow(ctx, createProductVariantOption, arg.ProductVariantID, arg.VariantOptionID)
	var i ProductVariantOption
	err := row.Scan(&i.ProductVariantID, &i.VariantOptionID)
	return i, err
}

const deleteProductVariantOption = `-- name: DeleteProductVariantOption :exec
DELETE FROM product_variant_options
WHERE product_variant_id = $1 AND variant_option_id = $2
`

type DeleteProductVariantOptionParams struct {
	ProductVariantID string `json:"product_variant_id"`
	VariantOptionID  string `json:"variant_option_id"`
}

func (q *Queries) DeleteProductVariantOption(ctx context.Context, arg DeleteProductVariantOptionParams) error {
	_, err := q.db.Exec(ctx, deleteProductVariantOption, arg.ProductVariantID, arg.VariantOptionID)
	return err
}

const deleteProductVariantOptionsByProductVariantID = `-- name: DeleteProductVariantOptionsByProductVariantID :exec
DELETE FROM product_variant_options
WHERE product_variant_id = $1
`

func (q *Queries) DeleteProductVariantOptionsByProductVariantID(ctx context.Context, productVariantID string) error {
	_, err := q.db.Exec(ctx, deleteProductVariantOptionsByProductVariantID, productVariantID)
	return err
}

const getProductVariantOption = `-- name: GetProductVariantOption :one
SELECT product_variant_id, variant_option_id FROM product_variant_options
WHERE product_variant_id = $1 AND variant_option_id = $2
`

type GetProductVariantOptionParams struct {
	ProductVariantID string `json:"product_variant_id"`
	VariantOptionID  string `json:"variant_option_id"`
}

func (q *Queries) GetProductVariantOption(ctx context.Context, arg GetProductVariantOptionParams) (ProductVariantOption, error) {
	row := q.db.QueryRow(ctx, getProductVariantOption, arg.ProductVariantID, arg.VariantOptionID)
	var i ProductVariantOption
	err := row.Scan(&i.ProductVariantID, &i.VariantOptionID)
	return i, err
}

const listProductVariantOptionsByProductVariantID = `-- name: ListProductVariantOptionsByProductVariantID :many
SELECT product_variant_id, variant_option_id FROM product_variant_options
WHERE product_variant_id = $1
`

func (q *Queries) ListProductVariantOptionsByProductVariantID(ctx context.Context, productVariantID string) ([]ProductVariantOption, error) {
	rows, err := q.db.Query(ctx, listProductVariantOptionsByProductVariantID, productVariantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductVariantOption
	for rows.Next() {
		var i ProductVariantOption
		if err := rows.Scan(&i.ProductVariantID, &i.VariantOptionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductVariantOptionsByVariantOptionID = `-- name: ListProductVariantOptionsByVariantOptionID :many
SELECT product_variant_id, variant_option_id FROM product_variant_options
WHERE variant_option_id = $1
`

func (q *Queries) ListProductVariantOptionsByVariantOptionID(ctx context.Context, variantOptionID string) ([]ProductVariantOption, error) {
	rows, err := q.db.Query(ctx, listProductVariantOptionsByVariantOptionID, variantOptionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductVariantOption
	for rows.Next() {
		var i ProductVariantOption
		if err := rows.Scan(&i.ProductVariantID, &i.VariantOptionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
