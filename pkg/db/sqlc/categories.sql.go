// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (id, created_at, updated_at, name, description, store_id, parent_id, variants)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, name, description, store_id, parent_id, variants
`

type CreateCategoryParams struct {
	ID          string           `json:"id"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	Name        string           `json:"name"`
	Description pgtype.Text      `json:"description"`
	StoreID     string           `json:"store_id"`
	ParentID    pgtype.Text      `json:"parent_id"`
	Variants    json.RawMessage  `json:"variants"`
}

// Categories
func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.StoreID,
		arg.ParentID,
		arg.Variants,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.StoreID,
		&i.ParentID,
		&i.Variants,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1 AND store_id = $2
`

type DeleteCategoryParams struct {
	ID      string `json:"id"`
	StoreID string `json:"store_id"`
}

func (q *Queries) DeleteCategory(ctx context.Context, arg DeleteCategoryParams) error {
	_, err := q.db.Exec(ctx, deleteCategory, arg.ID, arg.StoreID)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, created_at, updated_at, name, description, store_id, parent_id, variants FROM categories
WHERE id = $1  LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.StoreID,
		&i.ParentID,
		&i.Variants,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, created_at, updated_at, name, description, store_id, parent_id, variants FROM categories
WHERE store_id = $1
ORDER BY created_at
`

func (q *Queries) ListCategories(ctx context.Context, storeID string) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.StoreID,
			&i.ParentID,
			&i.Variants,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET name = $2, description = $3, parent_id = $4, variants = $5, updated_at = $6
WHERE id = $1 AND store_id = $7
RETURNING id, created_at, updated_at, name, description, store_id, parent_id, variants
`

type UpdateCategoryParams struct {
	ID          string           `json:"id"`
	Name        string           `json:"name"`
	Description pgtype.Text      `json:"description"`
	ParentID    pgtype.Text      `json:"parent_id"`
	Variants    json.RawMessage  `json:"variants"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	StoreID     string           `json:"store_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ParentID,
		arg.Variants,
		arg.UpdatedAt,
		arg.StoreID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.StoreID,
		&i.ParentID,
		&i.Variants,
	)
	return i, err
}
