// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: address.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (id, created_at, updated_at, address_line_1, address_line_2, city, pincode, country_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, address_line_1, address_line_2, city, pincode, country_id
`

type CreateAddressParams struct {
	ID           string           `json:"id"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	AddressLine1 string           `json:"address_line_1"`
	AddressLine2 pgtype.Text      `json:"address_line_2"`
	City         string           `json:"city"`
	Pincode      string           `json:"pincode"`
	CountryID    string           `json:"country_id"`
}

// Addresses
func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.Pincode,
		arg.CountryID,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.Pincode,
		&i.CountryID,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM addresses
WHERE id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteAddress, id)
	return err
}

const getAddress = `-- name: GetAddress :one
SELECT id, created_at, updated_at, address_line_1, address_line_2, city, pincode, country_id FROM addresses
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAddress(ctx context.Context, id string) (Address, error) {
	row := q.db.QueryRow(ctx, getAddress, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.Pincode,
		&i.CountryID,
	)
	return i, err
}

const listAddresses = `-- name: ListAddresses :many
SELECT id, created_at, updated_at, address_line_1, address_line_2, city, pincode, country_id FROM addresses
WHERE country_id = $1
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type ListAddressesParams struct {
	CountryID string `json:"country_id"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) ListAddresses(ctx context.Context, arg ListAddressesParams) ([]Address, error) {
	rows, err := q.db.Query(ctx, listAddresses, arg.CountryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.Pincode,
			&i.CountryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE addresses
SET address_line_1 = $2, address_line_2 = $3, city = $4, pincode = $5, country_id = $6, updated_at = $7
WHERE id = $1
RETURNING id, created_at, updated_at, address_line_1, address_line_2, city, pincode, country_id
`

type UpdateAddressParams struct {
	ID           string           `json:"id"`
	AddressLine1 string           `json:"address_line_1"`
	AddressLine2 pgtype.Text      `json:"address_line_2"`
	City         string           `json:"city"`
	Pincode      string           `json:"pincode"`
	CountryID    string           `json:"country_id"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, updateAddress,
		arg.ID,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.Pincode,
		arg.CountryID,
		arg.UpdatedAt,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.Pincode,
		&i.CountryID,
	)
	return i, err
}
